package com.example.telelink.service;

import com.example.telelink.entity.Mensaje;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.List;

@Service
public class GeminiService {

    private static final Logger logger = LoggerFactory.getLogger(GeminiService.class);

    @Value("${gemini.api.key}")
    private String apiKey;

    private final ConversacionService conversacionService;
    private final ContactoService contactoService;
    private final WebClient webClient = WebClient.create("https://generativelanguage.googleapis.com");

    public GeminiService(ConversacionService conversacionService, ContactoService contactoService) {
        this.conversacionService = conversacionService;
        this.contactoService = contactoService;
    }

    public String responderConContexto(String pregunta, Integer usuarioId) {
        logger.info("Procesando pregunta con contexto: {} para usuario: {}", pregunta, usuarioId);

        try {
            // Verificar consultas espec√≠ficas primero
            String respuestaEspecifica = verificarConsultasEspecificas(pregunta);
            if (respuestaEspecifica != null) {
                return respuestaEspecifica;
            }

            // Obtener contexto de conversaci√≥n
            List<Mensaje> historial = conversacionService.obtenerUltimosMensajes(usuarioId, 10);
            String contextoConversacion = construirContextoConversacion(historial);
            String promptCompleto = crearPromptConContextoMunicipal(contextoConversacion, pregunta);

            return llamarGeminiAPI(promptCompleto);

        } catch (Exception e) {
            logger.error("Error en responderConContexto", e);
            return "Disculpa, hubo un error. Intenta nuevamente o ll√°manos al " + contactoService.obtenerTelefono();
        }
    }

    public String responder(String pregunta) {
        logger.info("Procesando pregunta sin contexto: {}", pregunta);

        try {
            String respuestaEspecifica = verificarConsultasEspecificas(pregunta);
            if (respuestaEspecifica != null) {
                return respuestaEspecifica;
            }

            String promptCompleto = crearPromptMunicipal(pregunta);
            return llamarGeminiAPI(promptCompleto);

        } catch (Exception e) {
            logger.error("Error en responder", e);
            return "Disculpa, hubo un error. Intenta nuevamente o ll√°manos al " + contactoService.obtenerTelefono();
        }
    }

    /**
     * Verificar consultas espec√≠ficas con respuestas mejoradas
     */
    private String verificarConsultasEspecificas(String pregunta) {
        try {
            String preguntaLower = normalizarTexto(pregunta);
            logger.debug("Verificando consulta: '{}'", preguntaLower);

            // Horarios - respuestas m√°s directas
            if (containsAnyKeyword(preguntaLower, new String[]{
                    "que hora abre", "a que hora abre", "cuando abre", "hora de apertura"
            })) {
                return "üìÖ Abrimos a las **8:00 AM** de lunes a viernes.";
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "que hora cierra", "a que hora cierra", "cuando cierra", "hora de cierre", "hasta que hora"
            })) {
                return "üìÖ Cerramos a las **5:00 PM** de lunes a viernes.";
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "horario", "horarios", "atencion", "funcionamiento"
            })) {
                return "üïí **Horarios:** Lunes a Viernes de 8:00 AM a 5:00 PM\nüìç " + contactoService.obtenerDireccion();
            }

            // Canchas deportivas - informaci√≥n espec√≠fica
            if (containsAnyKeyword(preguntaLower, new String[]{
                    "que canchas tienen", "canchas disponibles", "tipos de cancha"
            })) {
                return "üèüÔ∏è **Canchas disponibles:**\n" +
                        "‚öΩ F√∫tbol (grass sint√©tico)\n" +
                        "üèê V√≥ley (techada)\n" +
                        "üèÄ B√°squet (techada)\n" +
                        "üéæ Fulbito (sint√©tico)\n\n" +
                        "Para reservar: " + contactoService.obtenerTelefono();
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "cancha de futbol", "canchas de futbol", "futbol", "grass"
            })) {
                return "‚öΩ **Cancha de F√∫tbol:**\n" +
                        "‚Ä¢ Grass sint√©tico\n" +
                        "‚Ä¢ Medidas reglamentarias\n" +
                        "‚Ä¢ Iluminaci√≥n nocturna\n\n" +
                        "üìû Reservas: " + contactoService.obtenerTelefono();
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "cancha de voley", "canchas de voley", "volley", "v√≥ley"
            })) {
                return "üèê **Cancha de V√≥ley:**\n" +
                        "‚Ä¢ Techada\n" +
                        "‚Ä¢ Piso de parquet\n" +
                        "‚Ä¢ Red reglamentaria\n\n" +
                        "üìû Reservas: " + contactoService.obtenerTelefono();
            }

            // Informaci√≥n de contacto b√°sica
            if (containsAnyKeyword(preguntaLower, new String[]{
                    "telefono", "tel√©fono", "llamar", "numero"
            })) {
                return "üìû **Tel√©fonos:**\n" +
                        "‚òéÔ∏è Central: " + contactoService.obtenerTelefono() + "\n" +
                        "üö® Emergencias: " + contactoService.obtenerTelefonoEmergencias();
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "direccion", "direcci√≥n", "ubicacion", "donde estan"
            })) {
                return "üìç **Ubicaci√≥n:** " + contactoService.obtenerDireccion() + "\n" +
                        "üïí Lunes a Viernes de 8:00 AM a 5:00 PM";
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "whatsapp", "whats", "wsp", "mensaje"
            })) {
                return "üì± **WhatsApp:** " + contactoService.obtenerWhatsApp();
            }

            if (containsAnyKeyword(preguntaLower, new String[]{
                    "pagina web", "p√°gina web", "sitio web", "web"
            })) {
                return "üåê **P√°gina Web:** " + contactoService.obtenerPaginaWeb();
            }

            // Reservas
            if (containsAnyKeyword(preguntaLower, new String[]{
                    "como reservar", "reservar cancha", "reserva", "como hago para reservar"
            })) {
                return "üìã **Para reservar una cancha:**\n" +
                        "1Ô∏è‚É£ Llama al " + contactoService.obtenerTelefono() + "\n" +
                        "2Ô∏è‚É£ Visita " + contactoService.obtenerPaginaWeb() + "\n" +
                        "3Ô∏è‚É£ O ac√©rcate a nuestras oficinas\n\n" +
                        "üïí Atenci√≥n: Lunes a Viernes 8:00 AM - 5:00 PM";
            }

            return null; // No es consulta espec√≠fica

        } catch (Exception e) {
            logger.error("Error al verificar consultas espec√≠ficas", e);
            return null;
        }
    }

    private String crearPromptMunicipal(String pregunta) {
        return "Eres SanMI Bot de la Municipalidad Distrital de San Miguel. " +
                "Responde de forma amigable, directa y √∫til. No repitas informaci√≥n innecesaria.\n\n" +

                "INFORMACI√ìN MUNICIPAL:\n" +
                "- Direcci√≥n: " + contactoService.obtenerDireccion() + "\n" +
                "- Tel√©fono: " + contactoService.obtenerTelefono() + "\n" +
                "- WhatsApp: " + contactoService.obtenerWhatsApp() + "\n" +
                "- Web: " + contactoService.obtenerPaginaWeb() + "\n" +
                "- Horario: Lunes a Viernes 8:00 AM - 5:00 PM\n\n" +

                "CANCHAS DEPORTIVAS:\n" +
                "- F√∫tbol (grass sint√©tico)\n" +
                "- V√≥ley (techada)\n" +
                "- B√°squet (techada)\n" +
                "- Fulbito (sint√©tico)\n\n" +

                "Vecino: " + pregunta;
    }

    private String crearPromptConContextoMunicipal(String contextoConversacion, String preguntaActual) {
        return "Eres SanMI Bot de la Municipalidad Distrital de San Miguel. " +
                "Responde considerando el contexto previo. S√© directo y √∫til.\n\n" +

                "INFORMACI√ìN MUNICIPAL:\n" +
                "- Direcci√≥n: " + contactoService.obtenerDireccion() + "\n" +
                "- Tel√©fono: " + contactoService.obtenerTelefono() + "\n" +
                "- WhatsApp: " + contactoService.obtenerWhatsApp() + "\n" +
                "- Web: " + contactoService.obtenerPaginaWeb() + "\n" +
                "- Horario: Lunes a Viernes 8:00 AM - 5:00 PM\n\n" +

                "CANCHAS DEPORTIVAS:\n" +
                "- F√∫tbol (grass sint√©tico)\n" +
                "- V√≥ley (techada)\n" +
                "- B√°squet (techada)\n" +
                "- Fulbito (sint√©tico)\n\n" +

                contextoConversacion + "\n" +
                "Vecino: " + preguntaActual;
    }

    private boolean containsAnyKeyword(String mensaje, String[] keywords) {
        for (String keyword : keywords) {
            if (mensaje.contains(normalizarTexto(keyword))) {
                return true;
            }
        }
        return false;
    }

    private String normalizarTexto(String texto) {
        if (texto == null) return "";

        return texto.toLowerCase()
                .replace("√°", "a").replace("√©", "e").replace("√≠", "i")
                .replace("√≥", "o").replace("√∫", "u").replace("√±", "n")
                .trim();
    }

    private String construirContextoConversacion(List<Mensaje> historial) {
        if (historial == null || historial.isEmpty()) {
            return "Nueva conversaci√≥n.";
        }

        StringBuilder contexto = new StringBuilder("Conversaci√≥n previa:\n");
        for (Mensaje mensaje : historial) {
            String origen = mensaje.getOrigen() == Mensaje.Origen.usuario ? "Vecino" : "Bot";
            contexto.append(origen).append(": ").append(mensaje.getTextoMensaje()).append("\n");
        }
        return contexto.toString();
    }

    private String llamarGeminiAPI(String prompt) {
        try {
            if (apiKey == null || apiKey.trim().isEmpty()) {
                return "Error de configuraci√≥n. Contacta soporte t√©cnico.";
            }

            Map<String, Object> payload = Map.of(
                    "contents", List.of(
                            Map.of("parts", List.of(Map.of("text", prompt)))
                    )
            );

            Map response = webClient.post()
                    .uri("/v1beta/models/gemini-1.5-flash:generateContent?key=" + apiKey)
                    .header("Content-Type", "application/json")
                    .bodyValue(payload)
                    .retrieve()
                    .bodyToMono(Map.class)
                    .block();

            return extraerRespuestaDeAPI(response);

        } catch (WebClientResponseException e) {
            logger.error("Error WebClient: {} - {}", e.getStatusCode(), e.getResponseBodyAsString());
            return "Servicio temporalmente no disponible. Llama al " + contactoService.obtenerTelefono();
        } catch (Exception e) {
            logger.error("Error general Gemini API", e);
            return "Error de conexi√≥n. Intenta m√°s tarde o llama al " + contactoService.obtenerTelefono();
        }
    }

    private String extraerRespuestaDeAPI(Map response) {
        try {
            if (response == null) return "Error: Respuesta vac√≠a";

            List<Map<String, Object>> candidates = (List<Map<String, Object>>) response.get("candidates");
            if (candidates != null && !candidates.isEmpty()) {
                Map<String, Object> content = (Map<String, Object>) candidates.get(0).get("content");
                if (content != null) {
                    List<Map<String, String>> parts = (List<Map<String, String>>) content.get("parts");
                    if (parts != null && !parts.isEmpty()) {
                        String textoRespuesta = parts.get(0).get("text");
                        if (textoRespuesta != null && !textoRespuesta.trim().isEmpty()) {
                            return textoRespuesta;
                        }
                    }
                }
            }

            return "No se pudo generar respuesta";

        } catch (Exception e) {
            logger.error("Error al extraer respuesta", e);
            return "Error al procesar respuesta";
        }
    }
}